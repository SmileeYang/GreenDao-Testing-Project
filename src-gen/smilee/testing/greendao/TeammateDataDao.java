package smilee.testing.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import smilee.testing.greendao.TeammateData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TEAMMATE_DATA.
*/
public class TeammateDataDao extends AbstractDao<TeammateData, Long> {

    public static final String TABLENAME = "TEAMMATE_DATA";

    /**
     * Properties of entity TeammateData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "Name", false, "NAME");
        public final static Property Gender = new Property(2, String.class, "Gender", false, "GENDER");
        public final static Property Age = new Property(3, Integer.class, "Age", false, "AGE");
        public final static Property Birthday = new Property(4, String.class, "Birthday", false, "BIRTHDAY");
        public final static Property Seniority = new Property(5, Integer.class, "Seniority", false, "SENIORITY");
        public final static Property AddDate = new Property(6, String.class, "AddDate", false, "ADD_DATE");
    };


    public TeammateDataDao(DaoConfig config) {
        super(config);
    }
    
    public TeammateDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TEAMMATE_DATA' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT," + // 1: Name
                "'GENDER' TEXT," + // 2: Gender
                "'AGE' INTEGER," + // 3: Age
                "'BIRTHDAY' TEXT," + // 4: Birthday
                "'SENIORITY' INTEGER," + // 5: Seniority
                "'ADD_DATE' TEXT);"); // 6: AddDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TEAMMATE_DATA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TeammateData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Name = entity.getName();
        if (Name != null) {
            stmt.bindString(2, Name);
        }
 
        String Gender = entity.getGender();
        if (Gender != null) {
            stmt.bindString(3, Gender);
        }
 
        Integer Age = entity.getAge();
        if (Age != null) {
            stmt.bindLong(4, Age);
        }
 
        String Birthday = entity.getBirthday();
        if (Birthday != null) {
            stmt.bindString(5, Birthday);
        }
 
        Integer Seniority = entity.getSeniority();
        if (Seniority != null) {
            stmt.bindLong(6, Seniority);
        }
 
        String AddDate = entity.getAddDate();
        if (AddDate != null) {
            stmt.bindString(7, AddDate);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TeammateData readEntity(Cursor cursor, int offset) {
        TeammateData entity = new TeammateData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Gender
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // Age
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Birthday
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // Seniority
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // AddDate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TeammateData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGender(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAge(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setBirthday(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSeniority(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setAddDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TeammateData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TeammateData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
